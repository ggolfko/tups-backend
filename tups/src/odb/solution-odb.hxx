// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef SOLUTION_ODB_HXX
#define SOLUTION_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "solution.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // solution
  //
  template <>
  struct class_traits< ::solution >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::solution >
  {
    public:
    typedef ::solution object_type;
    typedef ::solution* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // NSOLVED
  //
  template <>
  struct class_traits< ::NSOLVED >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::NSOLVED >
  {
    public:
    typedef ::NSOLVED view_type;
    typedef ::NSOLVED* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // NSUBMIT
  //
  template <>
  struct class_traits< ::NSUBMIT >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::NSUBMIT >
  {
    public:
    typedef ::NSUBMIT view_type;
    typedef ::NSUBMIT* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // user
  //
  template <>
  struct class_traits< ::user >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::user >
  {
    public:
    typedef ::user object_type;
    typedef ::user* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // solution
  //
  template <typename A>
  struct query_columns< ::solution, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    id_type_;

    static const id_type_ id;

    // source_code_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    source_code_id_type_;

    static const source_code_id_type_ source_code_id;

    // problem_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    problem_id_type_;

    static const problem_id_type_ problem_id;

    // user_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    user_id_type_;

    static const user_id_type_ user_id;

    // time_used
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    time_used_type_;

    static const time_used_type_ time_used;

    // memory_used
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    memory_used_type_;

    static const memory_used_type_ memory_used;

    // language
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    language_type_;

    static const language_type_ language;

    // main_class
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    main_class_type_;

    static const main_class_type_ main_class;

    // result
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    result_type_;

    static const result_type_ result;

    // wait_diff
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    wait_diff_type_;

    static const wait_diff_type_ wait_diff;

    // ratio
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        float,
        mysql::id_float >::query_type,
      mysql::id_float >
    ratio_type_;

    static const ratio_type_ ratio;
  };

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::id_type_
  query_columns< ::solution, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::source_code_id_type_
  query_columns< ::solution, id_mysql, A >::
  source_code_id (A::table_name, "`source_code_id`", 0);

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::problem_id_type_
  query_columns< ::solution, id_mysql, A >::
  problem_id (A::table_name, "`problem_id`", 0);

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::user_id_type_
  query_columns< ::solution, id_mysql, A >::
  user_id (A::table_name, "`user_id`", 0);

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::time_used_type_
  query_columns< ::solution, id_mysql, A >::
  time_used (A::table_name, "`time_used`", 0);

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::memory_used_type_
  query_columns< ::solution, id_mysql, A >::
  memory_used (A::table_name, "`memory_used`", 0);

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::language_type_
  query_columns< ::solution, id_mysql, A >::
  language (A::table_name, "`language`", 0);

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::main_class_type_
  query_columns< ::solution, id_mysql, A >::
  main_class (A::table_name, "`main_class`", 0);

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::result_type_
  query_columns< ::solution, id_mysql, A >::
  result (A::table_name, "`result`", 0);

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::wait_diff_type_
  query_columns< ::solution, id_mysql, A >::
  wait_diff (A::table_name, "`wait_diff`", 0);

  template <typename A>
  const typename query_columns< ::solution, id_mysql, A >::ratio_type_
  query_columns< ::solution, id_mysql, A >::
  ratio (A::table_name, "`ratio`", 0);

  template <typename A>
  struct pointer_query_columns< ::solution, id_mysql, A >:
    query_columns< ::solution, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::solution, id_mysql >:
    public access::object_traits< ::solution >
  {
    public:
    struct id_image_type
    {
      unsigned int id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      unsigned int id_value;
      my_bool id_null;

      // source_code_id_
      //
      unsigned int source_code_id_value;
      my_bool source_code_id_null;

      // problem_id_
      //
      unsigned int problem_id_value;
      my_bool problem_id_null;

      // user_id_
      //
      unsigned int user_id_value;
      my_bool user_id_null;

      // time_used_
      //
      unsigned int time_used_value;
      my_bool time_used_null;

      // memory_used_
      //
      unsigned int memory_used_value;
      my_bool memory_used_null;

      // language_
      //
      unsigned int language_value;
      my_bool language_null;

      // main_class_
      //
      details::buffer main_class_value;
      unsigned long main_class_size;
      my_bool main_class_null;

      // result_
      //
      unsigned int result_value;
      my_bool result_null;

      // wait_diff_
      //
      unsigned int wait_diff_value;
      my_bool wait_diff_null;

      // ratio_
      //
      float ratio_value;
      my_bool ratio_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 11UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::solution, id_common >:
    public access::object_traits_impl< ::solution, id_mysql >
  {
  };

  // NSOLVED
  //
  template <>
  class access::view_traits_impl< ::NSOLVED, id_mysql >:
    public access::view_traits< ::NSOLVED >
  {
    public:
    struct image_type
    {
      // solved
      //
      unsigned int solved_value;
      my_bool solved_null;

      std::size_t version;
    };

    typedef mysql::view_statements<view_type> statements_type;

    typedef mysql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::NSOLVED, id_common >:
    public access::view_traits_impl< ::NSOLVED, id_mysql >
  {
  };

  // NSUBMIT
  //
  template <>
  class access::view_traits_impl< ::NSUBMIT, id_mysql >:
    public access::view_traits< ::NSUBMIT >
  {
    public:
    struct image_type
    {
      // submit
      //
      unsigned int submit_value;
      my_bool submit_null;

      std::size_t version;
    };

    typedef mysql::view_statements<view_type> statements_type;

    typedef mysql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::NSUBMIT, id_common >:
    public access::view_traits_impl< ::NSUBMIT, id_mysql >
  {
  };

  // user
  //
  template <typename A>
  struct query_columns< ::user, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    id_type_;

    static const id_type_ id;

    // submit
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    submit_type_;

    static const submit_type_ submit;

    // solved
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    solved_type_;

    static const solved_type_ solved;
  };

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::id_type_
  query_columns< ::user, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::submit_type_
  query_columns< ::user, id_mysql, A >::
  submit (A::table_name, "`submit`", 0);

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::solved_type_
  query_columns< ::user, id_mysql, A >::
  solved (A::table_name, "`solved`", 0);

  template <typename A>
  struct pointer_query_columns< ::user, id_mysql, A >:
    query_columns< ::user, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::user, id_mysql >:
    public access::object_traits< ::user >
  {
    public:
    struct id_image_type
    {
      unsigned int id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      unsigned int id_value;
      my_bool id_null;

      // submit_
      //
      unsigned int submit_value;
      my_bool submit_null;

      // solved_
      //
      unsigned int solved_value;
      my_bool solved_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::user, id_common >:
    public access::object_traits_impl< ::user, id_mysql >
  {
  };

  // solution
  //
  // NSOLVED
  //
  struct access::view_traits_impl< ::NSOLVED, id_mysql >::query_columns:
    odb::pointer_query_columns<
      ::solution,
      id_mysql,
      odb::access::object_traits_impl< ::solution, id_mysql > >
  {
  };

  // NSUBMIT
  //
  struct access::view_traits_impl< ::NSUBMIT, id_mysql >::query_columns:
    odb::pointer_query_columns<
      ::solution,
      id_mysql,
      odb::access::object_traits_impl< ::solution, id_mysql > >
  {
  };

  // user
  //
}

#include "solution-odb.ixx"

#include <odb/post.hxx>

#endif // SOLUTION_ODB_HXX
